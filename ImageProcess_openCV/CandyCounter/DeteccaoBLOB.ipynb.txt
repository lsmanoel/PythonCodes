{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introdução"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Para contagem das balas, usamos o método de *componentes conectados*, também chamado de *extração de blobs* [https://en.wikipedia.org/wiki/Connected-component_labeling]. A função do OpenCV informa a posição (*centroids* no exemplo) e outros dados (*stats* no exemplo).\n",
    "\n",
    "Para escrever na tela, usa-se a função *putText*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 250.2206512   214.08892625]\n",
      " [ 166.59677419   47.7983871 ]\n",
      " [ 355.48837209   85.20930233]\n",
      " [  96.07714286  107.70857143]\n",
      " [ 266.70623145  128.13353116]\n",
      " [ 120.41230769  139.58769231]\n",
      " [ 279.13256484  161.14409222]\n",
      " [ 395.03592814  183.24550898]\n",
      " [ 167.60740741  196.39753086]\n",
      " [ 142.76315789  220.28362573]\n",
      " [ 107.45993031  299.02787456]\n",
      " [ 257.00719424  349.        ]\n",
      " [ 189.92567568  357.38175676]]\n",
      "[[     0      0    500    428 209983]\n",
      " [   156     36     23     25    372]\n",
      " [   345     74     22     23    344]\n",
      " [    85     97     23     23    350]\n",
      " [   257    117     21     24    337]\n",
      " [   110    129     22     22    325]\n",
      " [   268    150     23     23    347]\n",
      " [   384    173     23     22    334]\n",
      " [   157    184     24     24    405]\n",
      " [   132    210     21     22    342]\n",
      " [    97    289     21     21    287]\n",
      " [   247    339     21     21    278]\n",
      " [   180    348     21     20    296]]\n"
     ]
    }
   ],
   "source": [
    "# Adaptado de http://docs.opencv.org/3.2.0/df/d9d/tutorial_py_colorspaces.html\n",
    "import numpy as np\n",
    "import cv2\n",
    "\n",
    "frame = cv2.imread(\"mms.jpg\") #obtida de http://blogs.mathworks.com/images/steve/2010/mms.jpg\n",
    "\n",
    "# Convert BGR to HSV\n",
    "hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)\n",
    "# define range of blue color in HSV\n",
    "blue=100 #importante: faixa da componente H no OpenCV: [0, 179]\n",
    "thres=10\n",
    "lower_blue = np.array([blue-thres,50,50])\n",
    "upper_blue = np.array([blue+thres,255,255])\n",
    "\n",
    "# Threshold the HSV image to get only blue colors\n",
    "mask = cv2.inRange(hsv, lower_blue, upper_blue)\n",
    "kernel = np.ones((5,5),np.uint8)\n",
    "erosion = cv2.erode(mask,kernel,iterations = 3)\n",
    "#erosion=mask\n",
    "# Bitwise-AND mask and original image\n",
    "res = cv2.bitwise_and(frame,frame, mask= erosion)\n",
    "\n",
    "# find all blobs and label them\n",
    "n, labels, stats, centroids = cv2.connectedComponentsWithStats(erosion)\n",
    "print centroids\n",
    "print stats\n",
    "font = cv2.FONT_HERSHEY_SIMPLEX\n",
    "for n in range(1,len(stats)): #o primeiro (índice 0) é a imagem toda, então, desconsiderar\n",
    "    cv2.rectangle(res,(stats[n][0],stats[n][1]), (stats[n][0]+stats[n][2],stats[n][1]+stats[n][3]),(255,255,255),2)\n",
    "    cv2.putText(res,str(n),(stats[n][0],stats[n][1]), font, 1,(255,255,255),2,cv2.LINE_AA)\n",
    "    cv2.circle(res,(int(centroids[n][0]), int(centroids[n][1])), 3, (0,0,255), -1)\n",
    "cv2.putText(res,'Total: '+str(n),(0, stats[0][3]), font, 1,(255,255,255),2,cv2.LINE_AA)\n",
    "#cv2.imwrite('colorlabels.jpg',res) #para gravar a imagem\n",
    "cv2.imshow('frame',frame)\n",
    "cv2.imshow('mask',erosion)\n",
    "cv2.imshow('labels', res)\n",
    "#cv2.imshow('res',res)\n",
    "cv2.waitKey(0)\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 250.2206512   214.08892625]\n",
      " [ 166.59677419   47.7983871 ]\n",
      " [ 355.48837209   85.20930233]\n",
      " [  96.07714286  107.70857143]\n",
      " [ 266.70623145  128.13353116]\n",
      " [ 120.41230769  139.58769231]\n",
      " [ 279.13256484  161.14409222]\n",
      " [ 395.03592814  183.24550898]\n",
      " [ 167.60740741  196.39753086]\n",
      " [ 142.76315789  220.28362573]\n",
      " [ 107.45993031  299.02787456]\n",
      " [ 257.00719424  349.        ]\n",
      " [ 189.92567568  357.38175676]]\n"
     ]
    }
   ],
   "source": [
    "print centroids"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[     0      0    500    428 209983]\n",
      " [   156     36     23     25    372]\n",
      " [   345     74     22     23    344]\n",
      " [    85     97     23     23    350]\n",
      " [   257    117     21     24    337]\n",
      " [   110    129     22     22    325]\n",
      " [   268    150     23     23    347]\n",
      " [   384    173     23     22    334]\n",
      " [   157    184     24     24    405]\n",
      " [   132    210     21     22    342]\n",
      " [    97    289     21     21    287]\n",
      " [   247    339     21     21    278]\n",
      " [   180    348     21     20    296]]\n"
     ]
    }
   ],
   "source": [
    "print stats"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
